---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import TableOfContents from "../components/TableOfContents.astro";
import type { MarkdownHeading } from "astro";

export interface Props {
  data: CollectionEntry<"projects">["data"];
  headings: MarkdownHeading[];
}

const { title, description, repo, ogImage } = Astro.props.data;

const { headings } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead
      title={`${title} | Noah Gorstein`}
      description={description || ""}
      image={ogImage}
    />
  </head>

  <body>
    <Header />
    <main class="flex flex-col items-center pt-8">
      <section class="grid grid-cols-12 gap-4 p-1">
        <div class="xl:col-span-3"></div>
        <article
          class="mdx col-span-full max-w-[900px] px-4 md:px-16 xl:col-span-6 xl:px-4"
        >
          <div>
            <h2 class="mb-2 text-3xl">{title}</h2>
            <hr />
            <TableOfContents
              class="my-6 rounded border-[1px] p-4 xl:hidden"
              showBorder={false}
              headings={headings}
            />
          </div>
          <slot class="text-center" />
        </article>
        <aside class="hidden pr-4 md:col-span-2 xl:block">
          <TableOfContents
            id="side-toc"
            class="sticky top-0 pl-2 pt-8"
            headings={headings}
            repo={repo}
          />
        </aside>
      </section>
    </main>

    <Footer />
    <script>
      const setCurrent: IntersectionObserverCallback = (entries) => {
        for (let entry of entries) {
          const { id } = entry.target;
          const tocHeadingEl = document.querySelector(
            `#side-toc a[href="#${id}"]`
          );
          if (!tocHeadingEl) {
            return;
          }
          if (entry.isIntersecting) {
            document
              .querySelectorAll("#side-toc a")
              .forEach((e) => e.classList.remove("active"));
            tocHeadingEl.classList.add("active");
          }
        }
      };

      const observerOption: IntersectionObserverInit = {
        rootMargin: "-30% 0px",
        threshold: [0.1],
      };
      const headingObserver = new IntersectionObserver(
        setCurrent,
        observerOption
      );
      document
        .querySelectorAll("article :is(h2,h3,h4)")
        .forEach((heading) => headingObserver.observe(heading));
    </script>
  </body>
</html>
